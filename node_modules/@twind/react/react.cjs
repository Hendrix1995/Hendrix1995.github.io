var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// index.ts
__export(exports, {
  styled: () => styled
});
var React = __toModule(require("react"));
var import_is_prop_valid = __toModule(require("@emotion/is-prop-valid"));
var import_style = __toModule(require("twind/style"));
__exportStar(exports, __toModule(require("twind/style")));
function styled(tag = "div", {shouldForwardProp = import_is_prop_valid.default, ...config} = {}) {
  const tw = typeof this == "function" ? this : import_style.tw;
  const component = import_style.style(config);
  const validateProp = (prop) => shouldForwardProp(prop, import_is_prop_valid.default);
  const filterProps = (props) => Object.keys(props).filter(validateProp).reduce(($props, key) => {
    if (key != "class") {
      $props[key] = props[key];
    }
    return $props;
  }, {});
  const sc = React.forwardRef(({as = tag, ...props}, ref) => React.createElement(as, {
    ...typeof as == "string" ? filterProps(props) : props,
    ref,
    className: tw(component(typeof as == "string" ? {...props, as} : props))
  }));
  return Object.defineProperties(sc, Object.getOwnPropertyDescriptors(component));
}
//# sourceMappingURL=react.cjs.map
