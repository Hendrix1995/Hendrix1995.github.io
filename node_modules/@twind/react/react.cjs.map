{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import * as React from 'react'\n\nimport type { PolymorphicPropsWithRef } from 'react-polymorphic-types'\n\nimport type { TW, StyleConfig, StyleProps } from 'twind/style'\n\nimport isPropValid from '@emotion/is-prop-valid'\nimport { style, tw as defaultTW } from 'twind/style'\n\nexport * from 'twind/style'\n\nexport interface ShouldForwardProp {\n  (prop: string, defaultValidatorFn: (prop: string) => boolean): boolean\n}\n\nexport interface StyledOptions {\n  shouldForwardProp?: ShouldForwardProp\n}\n\nexport interface StyledComponent<Variants, Tag extends React.ElementType> {\n  <T extends React.ElementType = Tag>(\n    props: PolymorphicPropsWithRef<StyleProps<Variants>, T>,\n  ): React.ReactElement<any, any> | null\n\n  // defaultProps?: Partial<P>;\n  // displayName?: string;\n\n  /**\n   * CSS Selector associated with the current component.\n   *\n   * ```js\n   * const button = style({\n   *   base: {\n   *     color: \"DarkSlateGray\"\n   *   }\n   * })\n   *\n   * const article = style({\n   *   base: {\n   *     [button]: { boxShadow: \"0 0 0 5px\" }\n   *   }\n   * })\n   * ```\n   */\n  toString(): string\n\n  /**\n   * CSS Class associated with the current component.\n   *\n   * ```js\n   * const button = style({\n   *   base: {\n   *     color: \"DarkSlateGray\"\n   *   }\n   * })\n   *\n   * <div className={button.className} />\n   * ```\n   */\n  readonly className: string\n\n  /**\n   * CSS Selector associated with the current component.\n   *\n   * ```js\n   * const button = style({\n   *   base: {\n   *     color: \"DarkSlateGray\"\n   *   }\n   * })\n   *\n   * const Card = styled({\n   *   base: {\n   *     [Button.selector]: { boxShadow: \"0 0 0 5px\" }\n   *   }\n   * })\n   * ```\n   */\n  readonly selector: string\n}\n\nexport function styled<Variants, BaseVariants, Tag extends React.ElementType>(\n  this: TW | null | undefined | void,\n  base: StyledComponent<BaseVariants, Tag>,\n  config?: StyledOptions & StyleConfig<Variants, BaseVariants>,\n): StyledComponent<BaseVariants & Variants, Tag> & string\n\nexport function styled<Variants, Tag extends React.ElementType = 'div'>(\n  this: TW | null | undefined | void,\n  tag?: Tag,\n  config?: StyledOptions & StyleConfig<Variants>,\n): StyledComponent<Variants, Tag> & string\n\nexport function styled<Tag extends React.ElementType, Variants>(\n  this: TW | null | undefined | void,\n  tag: Tag = 'div' as Tag,\n  { shouldForwardProp = isPropValid, ...config }: StyledOptions & StyleConfig<Variants> = {},\n) {\n  const tw = typeof this == 'function' ? this : defaultTW\n\n  const component = style(config)\n\n  const validateProp = (prop: string): boolean => shouldForwardProp(prop, isPropValid)\n\n  const filterProps = (props: any): any =>\n    Object.keys(props)\n      .filter(validateProp)\n      .reduce(($props, key) => {\n        if (key != 'class') {\n          $props[key] = props[key]\n        }\n        return $props\n      }, {} as any)\n\n  const sc = React.forwardRef(\n    <T extends React.ElementType = Tag>(\n      { as = tag as unknown as T, ...props }: PolymorphicPropsWithRef<StyleProps<Variants>, T>,\n      ref: React.ForwardedRef<any>,\n    ) =>\n      React.createElement(as, {\n        ...(typeof as == 'string' ? filterProps(props) : props),\n        ref,\n        className: tw(component((typeof as == 'string' ? { ...props, as } : props) as any)),\n      }),\n  )\n\n  return Object.defineProperties(sc, Object.getOwnPropertyDescriptors(component))\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,YAAuB;AAMvB,2BAAwB;AACxB,mBAAuC;AAEvC,sBAAc;AAoFP,gBAEL,MAAW,OACX,CAAE,oBAAoB,iCAAgB,UAAkD;AAExF,QAAM,KAAK,OAAO,QAAQ,aAAa,OAAO;AAE9C,QAAM,YAAY,mBAAM;AAExB,QAAM,eAAe,CAAC,SAA0B,kBAAkB,MAAM;AAExE,QAAM,cAAc,CAAC,UACnB,OAAO,KAAK,OACT,OAAO,cACP,OAAO,CAAC,QAAQ;AACf,QAAI,OAAO;AACT,aAAO,OAAO,MAAM;AAAA;AAEtB,WAAO;AAAA,KACN;AAEP,QAAM,KAAK,AAAM,iBACf,CACE,CAAE,KAAK,QAAwB,QAC/B,QAEA,AAAM,oBAAc,IAAI;AAAA,OAClB,OAAO,MAAM,WAAW,YAAY,SAAS;AAAA,IACjD;AAAA,IACA,WAAW,GAAG,UAAW,OAAO,MAAM,WAAW,IAAK,OAAO,MAAO;AAAA;AAI1E,SAAO,OAAO,iBAAiB,IAAI,OAAO,0BAA0B;AAAA;",
  "names": []
}
