import { ElementType, ReactElement } from 'react';
import { PolymorphicPropsWithRef } from 'react-polymorphic-types';
import { StyleProps, TW, StyleConfig } from 'twind/style';
export * from 'twind/style';

interface ShouldForwardProp {
    (prop: string, defaultValidatorFn: (prop: string) => boolean): boolean;
}
interface StyledOptions {
    shouldForwardProp?: ShouldForwardProp;
}
interface StyledComponent<Variants, Tag extends ElementType> {
    <T extends ElementType = Tag>(props: PolymorphicPropsWithRef<StyleProps<Variants>, T>): ReactElement<any, any> | null;
    /**
     * CSS Selector associated with the current component.
     *
     * ```js
     * const button = style({
     *   base: {
     *     color: "DarkSlateGray"
     *   }
     * })
     *
     * const article = style({
     *   base: {
     *     [button]: { boxShadow: "0 0 0 5px" }
     *   }
     * })
     * ```
     */
    toString(): string;
    /**
     * CSS Class associated with the current component.
     *
     * ```js
     * const button = style({
     *   base: {
     *     color: "DarkSlateGray"
     *   }
     * })
     *
     * <div className={button.className} />
     * ```
     */
    readonly className: string;
    /**
     * CSS Selector associated with the current component.
     *
     * ```js
     * const button = style({
     *   base: {
     *     color: "DarkSlateGray"
     *   }
     * })
     *
     * const Card = styled({
     *   base: {
     *     [Button.selector]: { boxShadow: "0 0 0 5px" }
     *   }
     * })
     * ```
     */
    readonly selector: string;
}
declare function styled<Variants, BaseVariants, Tag extends ElementType>(this: TW | null | undefined | void, base: StyledComponent<BaseVariants, Tag>, config?: StyledOptions & StyleConfig<Variants, BaseVariants>): StyledComponent<BaseVariants & Variants, Tag> & string;
declare function styled<Variants, Tag extends ElementType = 'div'>(this: TW | null | undefined | void, tag?: Tag, config?: StyledOptions & StyleConfig<Variants>): StyledComponent<Variants, Tag> & string;

export { ShouldForwardProp, StyledComponent, StyledOptions, styled };
//# sourceMappingURL=react.d.ts.map
